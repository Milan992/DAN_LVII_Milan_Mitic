//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using WcfReceipt;

namespace ConsoleAppReceipt.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewReciept", ReplyAction="http://tempuri.org/IService1/AddNewRecieptResponse")]
        void AddNewReciept(List<string> reciept);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewReciept", ReplyAction="http://tempuri.org/IService1/AddNewRecieptResponse")]
        System.Threading.Tasks.Task AddNewRecieptAsync(string[] reciept);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllArticles", ReplyAction="http://tempuri.org/IService1/GetAllArticlesResponse")]
        List<Article> GetAllArticles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllArticles", ReplyAction="http://tempuri.org/IService1/GetAllArticlesResponse")]
        System.Threading.Tasks.Task<WcfReceipt.Article[]> GetAllArticlesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewArticle", ReplyAction="http://tempuri.org/IService1/AddNewArticleResponse")]
        void AddNewArticle(WcfReceipt.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewArticle", ReplyAction="http://tempuri.org/IService1/AddNewArticleResponse")]
        System.Threading.Tasks.Task AddNewArticleAsync(WcfReceipt.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WcfReceipt.CompositeType GetDataUsingDataContract(WcfReceipt.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WcfReceipt.CompositeType> GetDataUsingDataContractAsync(WcfReceipt.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ConsoleAppReceipt.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ConsoleAppReceipt.ServiceReference1.IService1>, ConsoleAppReceipt.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddNewReciept(List<string> reciept) {
            base.Channel.AddNewReciept(reciept);
        }
        
        public System.Threading.Tasks.Task AddNewRecieptAsync(string[] reciept) {
            return base.Channel.AddNewRecieptAsync(reciept);
        }
        
        public List<Article> GetAllArticles() {
            return base.Channel.GetAllArticles();
        }
        
        public System.Threading.Tasks.Task<WcfReceipt.Article[]> GetAllArticlesAsync() {
            return base.Channel.GetAllArticlesAsync();
        }
        
        public void AddNewArticle(WcfReceipt.Article article) {
            base.Channel.AddNewArticle(article);
        }
        
        public System.Threading.Tasks.Task AddNewArticleAsync(WcfReceipt.Article article) {
            return base.Channel.AddNewArticleAsync(article);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WcfReceipt.CompositeType GetDataUsingDataContract(WcfReceipt.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WcfReceipt.CompositeType> GetDataUsingDataContractAsync(WcfReceipt.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
